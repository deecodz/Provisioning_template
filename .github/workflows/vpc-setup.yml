name: AWS VPC Setup

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region'
        required: true
        type: string
      vpc_name:
        description: 'VPC Name'
        required: true
        type: string 

jobs:
  setup-vpc:
    runs-on: ubuntu-latest

    steps:
    - name: Set up AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ github.event.inputs.aws_region }}

    #Create VPC
    - name: Create VPC
      run: |
        VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query 'Vpc.VpcId' --output text)
        aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=${{ github.event.inputs.vpc_name }}
        echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV

    - name: Create and Configure NACL
      run: |
        NACL_ID=$(aws ec2 create-network-acl --vpc-id $VPC_ID --query 'NetworkAcl.NetworkAclId' --output text)
        aws ec2 create-tags --resources $NACL_ID --tags Key=Name,Value="${{ github.event.inputs.vpc_name }}-nacl"

        # Allow all inbound traffic
        aws ec2 create-network-acl-entry --network-acl-id $NACL_ID --ingress \
            --rule-number 100 --protocol tcp --port-range From=0,To=65535 --cidr-block 0.0.0.0/0 --rule-action allow

        # Allow all outbound traffic
        aws ec2 create-network-acl-entry --network-acl-id $NACL_ID --egress \
            --rule-number 100 --protocol tcp --port-range From=0,To=65535 --cidr-block 0.0.0.0/0 --rule-action allow

        echo "NACL_ID=$NACL_ID" >> $GITHUB_ENV
    
    - name: Create Subnets
      run: |
        SUBNET_IDS=""
        AVAILABLE_AZS=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[].ZoneName' --output text)
        IFS=$'\t' read -ra AZ_ARRAY <<< "$AVAILABLE_AZS"
        
        CIDR_INDEX=1
        for az in "${AZ_ARRAY[@]}"; do
          CIDR_BLOCK="10.0.${CIDR_INDEX}.0/24"
          SUBNET_ID=$(aws ec2 create-subnet --availability-zone $az --vpc-id $VPC_ID --cidr-block $CIDR_BLOCK --query 'Subnet.SubnetId' --output text)
          aws ec2 create-tags --resources $SUBNET_ID --tags Key=Name,Value="${{ github.event.inputs.vpc_name }}-subnet-$CIDR_BLOCK"
          aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID --map-public-ip-on-launch # Enables auto-assign public IP
          echo "Created subnet with ID $SUBNET_ID and CIDR block $CIDR_BLOCK in VPC ${{ github.event.inputs.vpc_name }} in AZ $az"
          SUBNET_IDS="$SUBNET_IDS,$SUBNET_ID"
          ((CIDR_INDEX++))
        done
        echo "SUBNET_IDS=${SUBNET_IDS:1}" >> $GITHUB_ENV

    - name: Associate NACL with Subnets
      run: |
        IFS=',' read -ra SUBNET_ARRAY <<< "$SUBNET_IDS"
        for SUBNET_ID in "${SUBNET_ARRAY[@]}"; do
          echo "Associating NACL $NACL_ID with Subnet $SUBNET_ID"
          
          # Obtain the current Network ACL associated with the subnet
          CURRENT_NACL_ID=$(aws ec2 describe-network-acls --filters "Name=association.subnet-id,Values=$SUBNET_ID" --query 'NetworkAcls[0].Associations[0].NetworkAclId' --output text)
    
          # Obtain the association ID between the subnet and its current Network ACL
          ASSOCIATION_ID=$(aws ec2 describe-network-acls --filters "Name=association.subnet-id,Values=$SUBNET_ID" --query 'NetworkAcls[0].Associations[0].NetworkAclAssociationId' --output text)
    
          # Replace the Network ACL associated with the subnet
          NEW_ASSOCIATION_ID=$(aws ec2 replace-network-acl-association --association-id $ASSOCIATION_ID --network-acl-id $NACL_ID --query 'NewAssociationId' --output text)
    
          echo "Replaced NACL. Old: $CURRENT_NACL_ID, New: $NACL_ID, New Association ID: $NEW_ASSOCIATION_ID"
        done
            
    # Create and attach Internet Gateway for VPC
    - name: Create and Attach Internet Gateway
      run: |
        IGW_ID=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
        echo "IGW_ID=$IGW_ID" >> $GITHUB_ENV
        aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID
        
    # Create a custom route table for the VPC
    - name: Create Route Table
      run: |
        ROUTE_TABLE_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query 'RouteTable.RouteTableId' --output text)
        echo "ROUTE_TABLE_ID=$ROUTE_TABLE_ID" >> $GITHUB_ENV

    # Add a route to Internet Gateway
    - name: Add Route to Internet Gateway
      run: |
        aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID

    # Associate route table with all subnets (making them public)
    - name: Associate Route Table with Subnets
      run: |
        for subnet_id in $(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[].SubnetId' --output text); do
          aws ec2 associate-route-table  --subnet-id $subnet_id --route-table-id $ROUTE_TABLE_ID
        done

        sleep 10
        
    # Create Default Security Group
    - name: Create Default Security Group
      run: |
        SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name "${{ github.event.inputs.vpc_name }}-default-sg" --description "Default security group for VPC ${{ github.event.inputs.vpc_name }}" --vpc-id $VPC_ID --query 'GroupId' --output text)
        # Allow all inbound and outbound traffic within the VPC
        aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol all --cidr 10.0.0.0/16
        aws ec2 authorize-security-group-egress --group-id $SECURITY_GROUP_ID --protocol all --cidr 10.0.0.0/16
        echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV

    # Enable DNS support and DNS hostnames
    - name: Enable DNS support and DNS hostnames
      run: |
        aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-support "{\"Value\":true}"
        aws ec2 modify-vpc-attribute --vpc-id $VPC_ID --enable-dns-hostnames "{\"Value\":true}"

    # Associate IPv6 CIDR Block
    - name: Associate IPv6 CIDR Block
      run: |
        IPV6_BLOCK=$(aws ec2 associate-vpc-cidr-block --vpc-id $VPC_ID --amazon-provided-ipv6-cidr-block --query 'Ipv6CidrBlockAssociationSet[0].Ipv6CidrBlock' --output text)
        echo "IPV6_BLOCK=$IPV6_BLOCK" >> $GITHUB_ENV

    # Output the created resources
    - name: Output Created Resources
      run: |
        echo "#### Created VPC: $VPC_ID" >> $GITHUB_STEP_SUMMARY
        echo "#### Created Internet Gateway: $IGW_ID" >> $GITHUB_STEP_SUMMARY
        echo "#### Created Route Table: $ROUTE_TABLE_ID" >> $GITHUB_STEP_SUMMARY
        echo "#### Created NACL: $NACL_ID" >> $GITHUB_STEP_SUMMARY
        echo "#### Created Security Group: $SECURITY_GROUP_ID" >> $GITHUB_STEP_SUMMARY
        
