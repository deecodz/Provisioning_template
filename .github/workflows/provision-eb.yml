on:
  workflow_call:
    inputs:
      config-path:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
        

jobs:
  provision-eb-instance:
    runs-on: ubuntu-latest
    environment: production  
    steps:
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Set up AWS credentials
        env: 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION  # Assuming AWS_REGION is an environment variable

      - name: Create instance profile and associate role
        run: |
          aws iam get-instance-profile --instance-profile-name $INSTANCE_PROFILE_NAME \
          || (aws iam create-instance-profile --instance-profile-name $INSTANCE_PROFILE_NAME &&
          aws iam add-role-to-instance-profile --role-name $ROLE_NAME --instance-profile-name $INSTANCE_PROFILE_NAME)

      - name: Create Elastic Beanstalk Application
        run: | 
          aws elasticbeanstalk create-application --application-name $APP_NAME --description "My application for Elastic Beanstalk"

      - name: Create New Security Group
        id: create_sg  # Assign an ID to the step
        run: |
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name $SECURITY_GROUP_NAME --description "Security group for Elastic Beanstalk" --vpc-id $VPC_ID | jq -r '.GroupId')
        
          # Add SSH (port 22) inbound rule
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr 0.0.0.0/0
      
          # Add HTTP (port 80) inbound rule
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 80 --cidr 0.0.0.0/0

          # Set the output variable for this step
          echo "::set-output name=sg_id::$SECURITY_GROUP_ID"

          # Sleep for a short delay to allow for AWS resource propagation
          sleep 20

      - name: Provision Elastic Beanstalk instance
        run: |
          aws elasticbeanstalk create-environment \
            --application-name $APP_NAME \
            --environment-name $ENV_NAME \
            --option-settings Namespace=aws:autoscaling:launchconfiguration,OptionName=IamInstanceProfile,Value=$INSTANCE_PROFILE_NAME \
            Namespace=aws:autoscaling:launchconfiguration,OptionName=EC2KeyName,Value=$EC2_KEY_NAME \
            Namespace=aws:autoscaling:launchconfiguration,OptionName=SecurityGroups,Value=$SECURITY_GROUP_NAME \
            --tier Name=WebServer \
            --solution-stack-name $SOLUTION_STACK
